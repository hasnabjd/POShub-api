#!/bin/bash

# Script de d√©ploiement automatis√© pour POSHub REST API - Chapitre 4
# Usage: ./scripts/deploy.sh [--no-confirm] [--stage dev|staging|prod]

set -e

# Couleurs pour l'affichage
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Configuration par d√©faut
STAGE="dev"
CONFIRM=true
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
REST_API_DIR="$(dirname "$SCRIPT_DIR")"
PROJECT_ROOT="$(dirname "$REST_API_DIR")"

echo -e "${BLUE}üöÄ POSHub REST API - Script de D√©ploiement Chapitre 4${NC}"
echo "=================================================="

# Traitement des arguments
while [[ $# -gt 0 ]]; do
    case $1 in
        --no-confirm)
            CONFIRM=false
            shift
            ;;
        --stage)
            STAGE="$2"
            shift 2
            ;;
        -h|--help)
            echo "Usage: $0 [--no-confirm] [--stage dev|staging|prod]"
            echo ""
            echo "Options:"
            echo "  --no-confirm    D√©ployer sans confirmation"
            echo "  --stage STAGE   Stage de d√©ploiement (dev, staging, prod)"
            echo "  -h, --help      Afficher cette aide"
            exit 0
            ;;
        *)
            echo -e "${RED}‚ùå Option inconnue: $1${NC}"
            exit 1
            ;;
    esac
done

# Validation du stage
if [[ ! "$STAGE" =~ ^(dev|staging|prod)$ ]]; then
    echo -e "${RED}‚ùå Stage invalide: $STAGE. Utilisez dev, staging ou prod.${NC}"
    exit 1
fi

echo -e "${YELLOW}üìã Configuration:${NC}"
echo "  - Stage: $STAGE"
echo "  - R√©pertoire: $REST_API_DIR"
echo "  - Confirmation: $CONFIRM"

# V√©rifications des pr√©requis
echo -e "\n${YELLOW}üîç V√©rification des pr√©requis...${NC}"

# V√©rifier AWS CLI
if ! command -v aws &> /dev/null; then
    echo -e "${RED}‚ùå AWS CLI non trouv√©. Installez AWS CLI.${NC}"
    exit 1
fi

# V√©rifier SAM CLI
if ! command -v sam &> /dev/null; then
    echo -e "${RED}‚ùå SAM CLI non trouv√©. Installez SAM CLI.${NC}"
    exit 1
fi

# V√©rifier les credentials AWS
if ! aws sts get-caller-identity &> /dev/null; then
    echo -e "${RED}‚ùå Credentials AWS non configur√©s. Ex√©cutez 'aws configure'.${NC}"
    exit 1
fi

# V√©rifier Python 3.13
if ! python3 --version | grep -q "3.13"; then
    echo -e "${YELLOW}‚ö†Ô∏è  Python 3.13 recommand√©. Version d√©tect√©e: $(python3 --version)${NC}"
fi

echo -e "${GREEN}‚úÖ Pr√©requis OK${NC}"

# Se d√©placer dans le r√©pertoire REST API
cd "$REST_API_DIR"

# V√©rifier les fichiers requis
echo -e "\n${YELLOW}üìÅ V√©rification des fichiers...${NC}"

required_files=(
    "sam-api.yml"
    "config/samconfig.toml"
    "handlers/orders_main.py"
    "handlers/health_main.py"
    "handlers/jwt_authorizer.py"
)

for file in "${required_files[@]}"; do
    if [[ ! -f "$file" ]]; then
        echo -e "${RED}‚ùå Fichier manquant: $file${NC}"
        exit 1
    fi
done

echo -e "${GREEN}‚úÖ Fichiers requis pr√©sents${NC}"

# V√©rifier les d√©pendances Python
echo -e "\n${YELLOW}üì¶ V√©rification des d√©pendances Python...${NC}"

if [[ -f "$PROJECT_ROOT/requirements.txt" ]]; then
    # V√©rifier si PyJWT est pr√©sent
    if ! grep -q "PyJWT" "$PROJECT_ROOT/requirements.txt"; then
        echo -e "${YELLOW}‚ö†Ô∏è  PyJWT manquant dans requirements.txt. Ajout automatique...${NC}"
        echo "PyJWT>=2.8.0,<3.0.0" >> "$PROJECT_ROOT/requirements.txt"
    fi
    echo -e "${GREEN}‚úÖ D√©pendances OK${NC}"
else
    echo -e "${RED}‚ùå requirements.txt non trouv√© dans $PROJECT_ROOT${NC}"
    exit 1
fi

# Affichage de la configuration de d√©ploiement
echo -e "\n${YELLOW}‚öôÔ∏è  Configuration de d√©ploiement:${NC}"
echo "  - Stack Name: poshub-rest-api-chapter4"
echo "  - Region: eu-north-1"
echo "  - Stage: $STAGE"
echo "  - Template: sam-api.yml"

# Confirmation utilisateur
if [[ "$CONFIRM" == true ]]; then
    echo -e "\n${YELLOW}‚ùì Continuer le d√©ploiement? (y/N)${NC}"
    read -r response
    if [[ ! "$response" =~ ^[Yy]$ ]]; then
        echo -e "${YELLOW}‚èπÔ∏è  D√©ploiement annul√©.${NC}"
        exit 0
    fi
fi

# Validation du template SAM
echo -e "\n${YELLOW}üîç Validation du template SAM...${NC}"
if sam validate --template-file sam-api.yml; then
    echo -e "${GREEN}‚úÖ Template SAM valide${NC}"
else
    echo -e "${RED}‚ùå Template SAM invalide${NC}"
    exit 1
fi

# Build
echo -e "\n${YELLOW}üî® Build du projet SAM...${NC}"
if sam build --config-file config/samconfig.toml; then
    echo -e "${GREEN}‚úÖ Build r√©ussi${NC}"
else
    echo -e "${RED}‚ùå √âchec du build${NC}"
    exit 1
fi

# D√©ploiement
echo -e "\n${YELLOW}üöÄ D√©ploiement en cours...${NC}"

deploy_cmd="sam deploy --config-file config/samconfig.toml --parameter-overrides Stage=\"$STAGE\""

if [[ "$CONFIRM" == false ]]; then
    deploy_cmd="$deploy_cmd --no-confirm-changeset"
fi

echo "Commande: $deploy_cmd"

if eval $deploy_cmd; then
    echo -e "\n${GREEN}üéâ D√©ploiement r√©ussi!${NC}"
else
    echo -e "\n${RED}‚ùå √âchec du d√©ploiement${NC}"
    exit 1
fi

# R√©cup√©ration des outputs
echo -e "\n${YELLOW}üìä R√©cup√©ration des informations de d√©ploiement...${NC}"

STACK_NAME="poshub-rest-api-chapter4"

# Fonction pour r√©cup√©rer un output
get_stack_output() {
    aws cloudformation describe-stacks \
        --stack-name "$STACK_NAME" \
        --query "Stacks[0].Outputs[?OutputKey=='$1'].OutputValue" \
        --output text 2>/dev/null || echo "N/A"
}

REST_API_URL=$(get_stack_output "RestApiUrl")
HEALTH_ENDPOINT=$(get_stack_output "HealthEndpoint")
ORDERS_ENDPOINT=$(get_stack_output "OrdersEndpoint")
API_KEY_ID=$(get_stack_output "ApiKeyId")

echo -e "\n${GREEN}üåê Endpoints d√©ploy√©s:${NC}"
echo "  - API Base URL: $REST_API_URL"
echo "  - Health Check: $HEALTH_ENDPOINT"
echo "  - Orders API: $ORDERS_ENDPOINT"

if [[ "$API_KEY_ID" != "N/A" ]]; then
    echo -e "\n${YELLOW}üîë R√©cup√©ration de l'API Key...${NC}"
    API_KEY_VALUE=$(aws apigateway get-api-key --api-key "$API_KEY_ID" --include-value --query 'value' --output text 2>/dev/null || echo "N/A")
    
    if [[ "$API_KEY_VALUE" != "N/A" ]]; then
        echo -e "${GREEN}üîê API Key: $API_KEY_VALUE${NC}"
    else
        echo -e "${YELLOW}‚ö†Ô∏è  Impossible de r√©cup√©rer la valeur de l'API Key${NC}"
    fi
fi

# Tests de base
echo -e "\n${YELLOW}üß™ Tests de base...${NC}"

if [[ "$HEALTH_ENDPOINT" != "N/A" ]]; then
    echo "Test health check..."
    if curl -s -f "$HEALTH_ENDPOINT" > /dev/null; then
        echo -e "${GREEN}‚úÖ Health check OK${NC}"
    else
        echo -e "${YELLOW}‚ö†Ô∏è  Health check en cours d'initialisation...${NC}"
    fi
fi

# Exemples d'utilisation
echo -e "\n${BLUE}üìñ Exemples d'utilisation:${NC}"
echo ""
echo "1. Test health check:"
echo "   curl -X GET \"$HEALTH_ENDPOINT\""
echo ""
echo "2. Test GET orders (libre):"
echo "   curl -X GET \"$ORDERS_ENDPOINT\""
echo ""

if [[ "$API_KEY_VALUE" != "N/A" ]]; then
    echo "3. Test POST orders (avec JWT + API Key):"
    echo "   curl -X POST \"$ORDERS_ENDPOINT\" \\"
    echo "     -H \"Authorization: Bearer <YOUR_JWT_TOKEN>\" \\"
    echo "     -H \"X-API-Key: $API_KEY_VALUE\" \\"
    echo "     -H \"Content-Type: application/json\" \\"
    echo "     -d '{\"orderId\": \"test-001\", \"amount\": 99.99}'"
    echo ""
fi

echo "4. Monitoring logs:"
echo "   aws logs tail /aws/lambda/poshub-orders-api-$STAGE --follow"
echo "   aws logs tail /aws/lambda/poshub-health-api-$STAGE --follow"
echo ""

echo "5. Documentation compl√®te:"
echo "   cat rest-api/README.md"
echo "   cat rest-api/examples/orders_calls.md"
echo "   cat rest-api/examples/health_calls.md"

echo -e "\n${GREEN}üéØ D√©ploiement Chapitre 4 termin√© avec succ√®s!${NC}"
echo -e "${BLUE}üìö Consultez rest-api/README.md pour la documentation compl√®te.${NC}" 