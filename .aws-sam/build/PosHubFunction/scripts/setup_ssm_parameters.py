#!/usr/bin/env python3
"""
Script pour cr√©er les param√®tres SSM n√©cessaires au fonctionnement de l'API POSHub.

Usage:
    python scripts/setup_ssm_parameters.py --stage dev
    python scripts/setup_ssm_parameters.py --stage prod --api-key "real-production-key"
"""

import argparse
import sys
from typing import Optional

import boto3
from botocore.exceptions import ClientError


def create_ssm_parameter(
    ssm_client,
    parameter_name: str,
    parameter_value: str,
    parameter_type: str = "SecureString",
    description: str = "",
    overwrite: bool = False,
) -> bool:
    """
    Cr√©e ou met √† jour un param√®tre SSM.

    Args:
        ssm_client: Client boto3 SSM
        parameter_name: Nom du param√®tre (ex: /pos/api-key)
        parameter_value: Valeur du param√®tre
        parameter_type: Type du param√®tre (String, StringList, SecureString)
        description: Description du param√®tre
        overwrite: Si True, √©crase le param√®tre existant

    Returns:
        True si succ√®s, False sinon
    """
    try:
        print(f"üìù Cr√©ation du param√®tre: {parameter_name}")

        response = ssm_client.put_parameter(
            Name=parameter_name,
            Value=parameter_value,
            Type=parameter_type,
            Description=description,
            Overwrite=overwrite,
        )

        print(f"‚úÖ Param√®tre cr√©√© - Version: {response['Version']}")
        return True

    except ClientError as e:
        error_code = e.response["Error"]["Code"]
        if error_code == "ParameterAlreadyExists":
            print(f"‚ö†Ô∏è Param√®tre d√©j√† existant: {parameter_name}")
            print("   Utilisez --overwrite pour le remplacer")
        else:
            print(f"‚ùå Erreur lors de la cr√©ation: {error_code} - {e}")
        return False
    except Exception as e:
        print(f"‚ùå Erreur inattendue: {e}")
        return False


def setup_poshub_parameters(
    stage: str, api_key: Optional[str] = None, overwrite: bool = False
):
    """
    Configure tous les param√®tres SSM n√©cessaires pour POSHub API.

    Args:
        stage: Environnement (dev, staging, prod)
        api_key: Cl√© API personnalis√©e (sinon g√©n√®re une cl√© de test)
        overwrite: Si True, √©crase les param√®tres existants
    """
    print(f"üöÄ Configuration des param√®tres SSM pour l'environnement: {stage}")

    # Initialiser le client SSM
    try:
        ssm_client = boto3.client("ssm")
        print("‚úÖ Client SSM initialis√©")
    except Exception as e:
        print(f"‚ùå Impossible d'initialiser le client SSM: {e}")
        print("   V√©rifiez vos credentials AWS et votre r√©gion")
        return False

    # D√©finir la cl√© API selon l'environnement
    if not api_key:
        if stage == "prod":
            print(
                "‚ùå ERREUR: Une cl√© API doit √™tre fournie pour la production"
            )
            print("   Utilisez: --api-key 'votre-cl√©-s√©curis√©e'")
            return False
        else:
            # Cl√© de test pour dev/staging
            api_key = f"test-api-key-{stage}-123456"
            print(f"üîß Utilisation d'une cl√© de test: {api_key}")

    # Param√®tres √† cr√©er
    parameters = [
        {
            "name": "/pos/api-key",
            "value": api_key,
            "type": "SecureString",
            "description": f"Cl√© API pour POSHub - Environnement: {stage}",
        },
        {
            "name": f"/pos/{stage}/config/timeout",
            "value": "30",
            "type": "String",
            "description": f"Timeout des requ√™tes HTTP - {stage}",
        },
        {
            "name": f"/pos/{stage}/config/max-connections",
            "value": "100",
            "type": "String",
            "description": f"Nombre maximum de connexions HTTP - {stage}",
        },
        {
            "name": f"/pos/{stage}/queue-url",
            "value": f"https://sqs.eu-north-1.amazonaws.com/ACCOUNT_ID/poshub-orders-{stage}-h",
            "type": "String",
            "description": f"URL de la queue SQS pour les commandes - {stage}",
        },
    ]

    # Cr√©er les param√®tres
    success_count = 0
    for param in parameters:
        success = create_ssm_parameter(
            ssm_client=ssm_client,
            parameter_name=param["name"],
            parameter_value=param["value"],
            parameter_type=param["type"],
            description=param["description"],
            overwrite=overwrite,
        )
        if success:
            success_count += 1

    # R√©sum√©
    print(
        f"\nüìä R√©sum√©: {success_count}/{len(parameters)} param√®tres configur√©s"
    )

    if success_count == len(parameters):
        print("‚úÖ Configuration SSM termin√©e avec succ√®s!")
        print(f"\nüîó Param√®tres cr√©√©s:")
        for param in parameters:
            print(f"   - {param['name']}")
        return True
    else:
        print("‚ö†Ô∏è Configuration partielle - V√©rifiez les erreurs ci-dessus")
        return False


def main():
    """Point d'entr√©e principal du script."""
    parser = argparse.ArgumentParser(
        description="Configure les param√®tres SSM pour POSHub API"
    )

    parser.add_argument(
        "--stage",
        required=True,
        choices=["dev", "staging", "prod"],
        help="Environnement de d√©ploiement",
    )

    parser.add_argument(
        "--api-key", help="Cl√© API personnalis√©e (obligatoire pour prod)"
    )

    parser.add_argument(
        "--overwrite",
        action="store_true",
        help="√âcrase les param√®tres existants",
    )

    parser.add_argument(
        "--region", default="eu-north-1", help="R√©gion AWS (d√©faut: eu-north-1)"
    )

    args = parser.parse_args()

    # Configurer la r√©gion AWS
    import os

    os.environ["AWS_DEFAULT_REGION"] = args.region

    print(f"üåç R√©gion AWS: {args.region}")

    # Ex√©cuter la configuration
    success = setup_poshub_parameters(
        stage=args.stage, api_key=args.api_key, overwrite=args.overwrite
    )

    sys.exit(0 if success else 1)


if __name__ == "__main__":
    main()
